name: Go Release

on:
    push:
        tags:
            - "v*"

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2

            - name: Set up Go
              uses: actions/setup-go@v2
              with:
                  go-version: '1.20'
            - name: Replace date string and version string
              run: |
                  export VERSION=${{ github.ref_name }}
                  export BUILD_TIME=`TZ=":Asia/Shanghai" date`
                  sed -i'.bak' "s/\$CI_VERSION/$VERSION/g" st.go
                  sed -i'.bak' "s/\$CI_BUILD_TIME/$BUILD_TIME/g" st.go
            - name: Build
              run: |
                  mkdir -p output
                  CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o output/st_windows_x64.exe
                  CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o output/st_linux_x64 
                  CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -o output/st_macos_x64 
                  CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -o output/st_macos_arm64
            - name: Compress files
              run: |
                  cp output/st_windows_x64.exe ./st.exe
                  zip st_windows_x64.zip ./st.exe
                  cp output/st_linux_x64 ./st
                  zip st_linux_x64.zip ./st
                  cp output/st_macos_x64 ./st
                  zip st_macos_x64.zip ./st
                  cp output/st_macos_arm64 ./st
                  zip st_macos_arm64.zip ./st
            - name: Create Release
              id: create_release
              uses: actions/create-release@latest
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
              with:
                  tag_name: ${{ github.ref }}
                  release_name: Release ${{ github.ref }}
                  draft: false
                  prerelease: false
            - name: Upload Windows x64 Release Zip
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing its ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
                  asset_path: ./st_windows_x64.zip
                  asset_name: st_windows_x64.zip
                  asset_content_type: application/zip
            - name: Upload Linux x64 Release Zip
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing its ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
                  asset_path: ./st_linux_x64.zip
                  asset_name: st_linux_x64.zip
                  asset_content_type: application/zip
            - name: Upload macOS x64 Release Zip
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing its ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
                  asset_path: ./st_macos_x64.zip
                  asset_name: st_macos_x64.zip
                  asset_content_type: application/zip
            - name: Upload macOS arm64 Release Zip
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing its ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
                  asset_path: ./st_macos_arm64.zip
                  asset_name: st_macos_arm64.zip
                  asset_content_type: application/zip
